{"ast":null,"code":"import _defineProperty from \"/Users/karthik-dhaaru/Documents/Workspace/Dharani/expense_tracker/expense_tracker_frontend/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { ADD_EXPENSE, GET_EXPENSE, DELETE_EXPENSE, UPDATE_EXPENSE } from \"../constants/constants\";\nimport _ from \"lodash\";\nconst initialState = {\n  expenses: []\n};\n\nconst expense = (state = initialState, action) => {\n  switch (action.type) {\n    case GET_EXPENSE:\n      const stateExpensesWithoutTableData = state.expenses.map(ex => _.omit(ex, \"tableData\"));\n\n      if (_.isEqual(action.payload, stateExpensesWithoutTableData)) {\n        return Object.assign({}, state, {\n          expenses: state.expenses\n        });\n      } else {\n        return Object.assign({}, state, {\n          expenses: state.expenses.concat(action.payload)\n        });\n      }\n\n    case ADD_EXPENSE:\n      {\n        return Object.assign({}, state, {\n          expenses: state.expenses.concat(_objectSpread({}, action.payload))\n        });\n      }\n\n    case UPDATE_EXPENSE:\n      const _action$payload = action.payload,\n            date = _action$payload.date,\n            name = _action$payload.name,\n            type = _action$payload.type,\n            mode = _action$payload.mode,\n            amount = _action$payload.amount,\n            notes = _action$payload.notes,\n            _id = _action$payload._id;\n      return _objectSpread({}, state, {\n        expenses: state.expenses.map(expense => expense._id === _id ? _objectSpread({}, expense, {\n          _id,\n          date,\n          name,\n          type,\n          mode,\n          amount,\n          notes\n        }) : expense)\n      });\n\n    case DELETE_EXPENSE:\n      {\n        const toBeDeletedID = action.payload._id;\n        return _objectSpread({}, state, {\n          expenses: state.expenses.filter(expenseType => expenseType._id !== toBeDeletedID)\n        });\n      }\n\n    default:\n      return state;\n  }\n};\n\nexport default expense;","map":{"version":3,"sources":["/Users/karthik-dhaaru/Documents/Workspace/Dharani/expense_tracker/expense_tracker_frontend/src/reducers/expense.js"],"names":["ADD_EXPENSE","GET_EXPENSE","DELETE_EXPENSE","UPDATE_EXPENSE","_","initialState","expenses","expense","state","action","type","stateExpensesWithoutTableData","map","ex","omit","isEqual","payload","Object","assign","concat","date","name","mode","amount","notes","_id","toBeDeletedID","filter","expenseType"],"mappings":";;;;;;AAAA,SACIA,WADJ,EAEIC,WAFJ,EAGIC,cAHJ,EAIIC,cAJJ,QAKO,wBALP;AAMA,OAAOC,CAAP,MAAc,QAAd;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,QAAQ,EAAE;AADO,CAArB;;AAIA,MAAMC,OAAO,GAAG,CAACC,KAAK,GAAGH,YAAT,EAAuBI,MAAvB,KAAkC;AAC9C,UAAQA,MAAM,CAACC,IAAf;AACI,SAAKT,WAAL;AAEI,YAAMU,6BAA6B,GAAGH,KAAK,CAACF,QAAN,CAAeM,GAAf,CAAmBC,EAAE,IAAIT,CAAC,CAACU,IAAF,CAAOD,EAAP,EAAW,WAAX,CAAzB,CAAtC;;AAEA,UAAIT,CAAC,CAACW,OAAF,CAAUN,MAAM,CAACO,OAAjB,EAA0BL,6BAA1B,CAAJ,EAA6D;AACzD,eAAOM,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAC5BF,UAAAA,QAAQ,EAAEE,KAAK,CAACF;AADY,SAAzB,CAAP;AAGH,OAJD,MAIO;AACH,eAAOW,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAC5BF,UAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAea,MAAf,CAAsBV,MAAM,CAACO,OAA7B;AADkB,SAAzB,CAAP;AAGH;;AACD,SAAKhB,WAAL;AAAkB;AACd,eAAOiB,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBV,KAAlB,EAAyB;AAC5BF,UAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAea,MAAf,mBACHV,MAAM,CAACO,OADJ;AADkB,SAAzB,CAAP;AAKH;;AAED,SAAKb,cAAL;AAAA,8BAGQM,MAAM,CAACO,OAHf;AAAA,YAEQI,IAFR,mBAEQA,IAFR;AAAA,YAEcC,IAFd,mBAEcA,IAFd;AAAA,YAEoBX,IAFpB,mBAEoBA,IAFpB;AAAA,YAE0BY,IAF1B,mBAE0BA,IAF1B;AAAA,YAEgCC,MAFhC,mBAEgCA,MAFhC;AAAA,YAEwCC,KAFxC,mBAEwCA,KAFxC;AAAA,YAE+CC,GAF/C,mBAE+CA,GAF/C;AAII,+BACOjB,KADP;AAEIF,QAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeM,GAAf,CAAoBL,OAAD,IACzBA,OAAO,CAACkB,GAAR,KAAgBA,GAAhB,qBACOlB,OADP;AAEIkB,UAAAA,GAFJ;AAGIL,UAAAA,IAHJ;AAIIC,UAAAA,IAJJ;AAKIX,UAAAA,IALJ;AAMIY,UAAAA,IANJ;AAOIC,UAAAA,MAPJ;AAQIC,UAAAA;AARJ,aASIjB,OAVE;AAFd;;AAgBJ,SAAKL,cAAL;AAAoB;AAChB,cAAMwB,aAAa,GAAGjB,MAAM,CAACO,OAAP,CAAeS,GAArC;AACA,iCACOjB,KADP;AAEIF,UAAAA,QAAQ,EAAEE,KAAK,CAACF,QAAN,CAAeqB,MAAf,CACNC,WAAW,IAAIA,WAAW,CAACH,GAAZ,KAAoBC,aAD7B;AAFd;AAKE;;AAEN;AACI,aAAOlB,KAAP;AApDZ;AAuDH,CAxDD;;AA0DA,eAAeD,OAAf","sourcesContent":["import {\n    ADD_EXPENSE,\n    GET_EXPENSE,\n    DELETE_EXPENSE,\n    UPDATE_EXPENSE\n} from \"../constants/constants\";\nimport _ from \"lodash\";\n\nconst initialState = {\n    expenses: []\n}\n\nconst expense = (state = initialState, action) => {\n    switch (action.type) {\n        case GET_EXPENSE:\n\n            const stateExpensesWithoutTableData = state.expenses.map(ex => _.omit(ex, \"tableData\"))\n            \n            if (_.isEqual(action.payload, stateExpensesWithoutTableData)){\n                return Object.assign({}, state, {\n                    expenses: state.expenses\n                });\n            } else {\n                return Object.assign({}, state, {\n                    expenses: state.expenses.concat(action.payload)\n                });\n            }\n            case ADD_EXPENSE: {\n                return Object.assign({}, state, {\n                    expenses: state.expenses.concat({\n                        ...action.payload\n                    })\n                });\n            }\n\n            case UPDATE_EXPENSE:\n                const {\n                    date, name, type, mode, amount, notes, _id\n                } = action.payload;\n                return {\n                    ...state,\n                    expenses: state.expenses.map((expense) =>\n                        expense._id === _id ? {\n                            ...expense,\n                            _id,\n                            date,\n                            name,\n                            type,\n                            mode,\n                            amount,\n                            notes\n                        } : expense\n                    )\n                };\n\n            case DELETE_EXPENSE:{\n                const toBeDeletedID = action.payload._id;\n                return {\n                    ...state,\n                    expenses: state.expenses.filter(\n                        expenseType => expenseType._id !== toBeDeletedID\n                    )\n                }}\n\n            default:\n                return state;\n    }\n\n}\n\nexport default expense;"]},"metadata":{},"sourceType":"module"}