{"ast":null,"code":"var _jsxFileName = \"/Users/karthik-dhaaru/Documents/Workspace/Dharani/expense_tracker/expense_tracker_frontend/src/components/chartModes.jsx\";\nimport React, { Component } from \"react\";\nimport { VictoryPie } from \"victory\";\nimport { connect } from \"react-redux\";\nimport { getExpense } from \"../actions/expense\";\nimport { getIncome } from \"../actions/income\";\nimport _ from \"lodash\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport Button from \"@material-ui/core/Button\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  list: {\n    width: 250\n  },\n  fullList: {\n    width: \"auto\"\n  },\n  drawer: {\n    position: 'relative',\n    whiteSpace: 'nowrap',\n    width: 300,\n    flexGrow: 1\n  }\n});\n\nclass ChartModes extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      drawerToggle: false,\n      type: \"income\"\n    };\n\n    this.handleToggle = () => {\n      const stateToChange = !this.state.drawerToggle;\n      this.setState({\n        drawerToggle: stateToChange\n      });\n    };\n\n    this.displayChartByExpenseType = () => {\n      const sampleData = [];\n      const expenses = this.props.expenses;\n      const expenseTypes = expenses.map(expense => expense.type);\n\n      const chartData = _.countBy(expenseTypes);\n\n      for (let i in chartData) {\n        sampleData.push({\n          x: i,\n          y: chartData[i]\n        });\n      }\n\n      return sampleData;\n    };\n\n    this.displayChartByIncomeVsExpense = () => {\n      const sampleData = [];\n      const expenses = this.props.expenses;\n      const income = this.props.income;\n      if (!expenses) return;\n      const expenseAmount = expenses.map(expense => _.parseInt(expense.amount));\n      const expenseObj = {\n        Expense: _.sum(expenseAmount)\n      };\n      if (!income) return;\n      const incomeAmount = income.map(inc => _.parseInt(inc.income));\n      const incomeObj = {\n        Income: _.sum(incomeAmount)\n      };\n      const sampleDataObj = Object.assign(expenseObj, incomeObj);\n\n      for (let i in sampleDataObj) {\n        sampleData.push({\n          x: i,\n          y: sampleDataObj[i]\n        });\n      }\n\n      return sampleData;\n    };\n\n    this.displayChartByExpenseMode = () => {\n      const sampleData = [];\n      const expenses = this.props.expenses;\n      if (!expenses) return;\n      const expenseModes = expenses.map(expense => expense.mode);\n\n      const chartData = _.countBy(expenseModes);\n\n      for (let i in chartData) {\n        sampleData.push({\n          x: i,\n          y: chartData[i]\n        });\n      }\n\n      return sampleData;\n    };\n\n    this.handleListItem = text => {\n      switch (text) {\n        case \"Income Vs Expense\":\n          this.handleToggle();\n          this.setState({\n            type: \"income\"\n          });\n          break;\n\n        case \"Expense Type\":\n          this.handleToggle();\n          this.setState({\n            type: \"expenseType\"\n          });\n          break;\n\n        case \"Expense Mode\":\n          this.handleToggle();\n          this.setState({\n            type: \"mode\"\n          });\n          break;\n\n        default:\n          return;\n      }\n    };\n\n    this.handleChartData = chartState => {\n      if (this.state.type === \"income\") return this.displayChartByIncomeVsExpense();else if (this.state.type === \"expenseType\") return this.displayChartByExpenseType();else return this.displayChartByExpenseMode();\n    };\n\n    this.sideList = classes => React.createElement(\"div\", {\n      role: \"presentation\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 122\n      },\n      __self: this\n    }, React.createElement(List, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 123\n      },\n      __self: this\n    }, [\"Income Vs Expense\", \"Expense Type\", \"Expense Mode\"].map((text, index) => React.createElement(ListItem, {\n      button: true,\n      key: index,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(ListItemText, {\n      primary: text,\n      onClick: () => this.handleListItem(text),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 127\n      },\n      __self: this\n    })))));\n\n    this.handleClick = datum => {\n      console.log(\"Clicked\", datum);\n    };\n  }\n\n  componentDidUpdate() {\n    this.displayChartByExpenseType();\n    this.displayChartByIncomeVsExpense();\n    getExpense();\n  }\n\n  render() {\n    const classes = this.props.classes;\n    console.log(classes);\n    return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(SwipeableDrawer, {\n      className: classes.drawer,\n      open: this.state.drawerToggle,\n      onClose: this.handleToggle,\n      onOpen: this.handleToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, this.sideList(classes))), React.createElement(\"div\", {\n      style: {\n        textAlign: \"center\"\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 158\n      },\n      __self: this\n    }, React.createElement(\"svg\", {\n      width: 500,\n      height: 500,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 159\n      },\n      __self: this\n    }, React.createElement(VictoryPie, {\n      data: this.handleChartData(this.state.type),\n      standalone: false,\n      colorScale: [\"red\", \"navy\", \"gray\", \"gold\", \"green\"],\n      animate: {\n        duration: 2000\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 170\n      },\n      __self: this\n    }, React.createElement(Button, {\n      color: \"secondary\",\n      onClick: this.handleToggle,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 171\n      },\n      __self: this\n    }, \"Choose Display Modes\"))));\n  }\n\n}\n\nconst mapStateToProps = state => {\n  return {\n    expenses: state.expense.expenses,\n    income: state.income.income\n  };\n};\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    getIncome: dispatch(getIncome()),\n    getExpense: dispatch(getExpense())\n  };\n};\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withStyles(styles)(ChartModes));","map":{"version":3,"sources":["/Users/karthik-dhaaru/Documents/Workspace/Dharani/expense_tracker/expense_tracker_frontend/src/components/chartModes.jsx"],"names":["React","Component","VictoryPie","connect","getExpense","getIncome","_","withStyles","SwipeableDrawer","Button","List","ListItem","ListItemText","drawerWidth","styles","theme","list","width","fullList","drawer","position","whiteSpace","flexGrow","ChartModes","state","drawerToggle","type","handleToggle","stateToChange","setState","displayChartByExpenseType","sampleData","expenses","props","expenseTypes","map","expense","chartData","countBy","i","push","x","y","displayChartByIncomeVsExpense","income","expenseAmount","parseInt","amount","expenseObj","Expense","sum","incomeAmount","inc","incomeObj","Income","sampleDataObj","Object","assign","displayChartByExpenseMode","expenseModes","mode","handleListItem","text","handleChartData","chartState","sideList","classes","index","handleClick","datum","console","log","componentDidUpdate","render","textAlign","duration","mapStateToProps","mapDispatchToProps","dispatch"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport { VictoryPie} from \"victory\";\nimport { connect } from \"react-redux\";\nimport { getExpense } from \"../actions/expense\";\nimport { getIncome } from \"../actions/income\";\nimport _ from \"lodash\";\nimport { withStyles } from \"@material-ui/core/styles\";\nimport SwipeableDrawer from \"@material-ui/core/SwipeableDrawer\";\nimport Button from \"@material-ui/core/Button\";\nimport List from \"@material-ui/core/List\";\nimport ListItem from \"@material-ui/core/ListItem\";\nimport ListItemText from \"@material-ui/core/ListItemText\";\n\nconst drawerWidth = 240;\nconst styles = theme => ({\n\tlist: {\n\t\twidth: 250\n\t},\n\tfullList: {\n\t\twidth: \"auto\"\n\t},\n\tdrawer: {\n\t\tposition: 'relative',\n\t\twhiteSpace: 'nowrap',\n\t\twidth: 300,\n\t\tflexGrow : 1\n\t}\n \n});\n\nclass ChartModes extends Component {\n\tstate = {\n\t\tdrawerToggle: false,\n\t\ttype: \"income\"\n\t};\n\n\tcomponentDidUpdate() {\n\t\tthis.displayChartByExpenseType();\n\t\tthis.displayChartByIncomeVsExpense();\n\t\tgetExpense();\n\t}\n\n\thandleToggle = () => {\n\t\tconst stateToChange = !this.state.drawerToggle;\n\t\tthis.setState({ drawerToggle: stateToChange });\n\t};\n\n\tdisplayChartByExpenseType = () => {\n\t\tconst sampleData = [];\n\t\tconst expenses = this.props.expenses;\n\t\tconst expenseTypes = expenses.map(expense => expense.type);\n\t\tconst chartData = _.countBy(expenseTypes);\n\t\tfor (let i in chartData) {\n\t\t\tsampleData.push({ x: i, y: chartData[i] });\n\t\t}\n\t\treturn sampleData;\n\t};\n\n\tdisplayChartByIncomeVsExpense = () => {\n\t\tconst sampleData = [];\n\t\tconst expenses = this.props.expenses;\n\t\tconst income = this.props.income;\n\t\tif (!expenses) return;\n\t\tconst expenseAmount = expenses.map(expense => _.parseInt(expense.amount));\n\t\tconst expenseObj = { Expense: _.sum(expenseAmount) };\n\n\t\tif (!income) return;\n\t\tconst incomeAmount = income.map(inc => _.parseInt(inc.income));\n\t\tconst incomeObj = { Income: _.sum(incomeAmount) };\n\t\tconst sampleDataObj = Object.assign(expenseObj, incomeObj);\n\n\t\tfor (let i in sampleDataObj) {\n\t\t\tsampleData.push({ x: i, y: sampleDataObj[i] });\n\t\t}\n\n\t\treturn sampleData;\n\t};\n\n\tdisplayChartByExpenseMode = () => {\n\t\tconst sampleData = [];\n\t\tconst expenses = this.props.expenses;\n\t\tif (!expenses) return;\n\t\tconst expenseModes = expenses.map(expense => expense.mode);\n\t\tconst chartData = _.countBy(expenseModes);\n\t\tfor (let i in chartData) {\n\t\t\tsampleData.push({ x: i, y: chartData[i] });\n\t\t}\n\t\treturn sampleData;\n\t};\n\n\thandleListItem = text => {\n\t\tswitch (text) {\n\t\t\tcase \"Income Vs Expense\":\n\t\t\t\tthis.handleToggle();\n\t\t\t\tthis.setState({ type: \"income\" });\n\t\t\t\tbreak;\n\n\t\t\tcase \"Expense Type\":\n\t\t\t\tthis.handleToggle();\n\t\t\t\tthis.setState({ type: \"expenseType\" });\n\t\t\t\tbreak;\n\n\t\t\tcase \"Expense Mode\":\n\t\t\t\tthis.handleToggle();\n\t\t\t\tthis.setState({ type: \"mode\" });\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\treturn;\n\t\t}\n\t};\n\n\thandleChartData = chartState => {\n\t\tif (this.state.type === \"income\")\n\t\t\treturn this.displayChartByIncomeVsExpense();\n\t\telse if (this.state.type === \"expenseType\")\n\t\t\treturn this.displayChartByExpenseType();\n\t\telse return this.displayChartByExpenseMode();\n\t};\n\n\tsideList = classes => (\n\t\t<div role=\"presentation\">\n\t\t\t<List>\n\t\t\t\t{[\"Income Vs Expense\", \"Expense Type\", \"Expense Mode\"].map(\n\t\t\t\t\t(text, index) => (\n\t\t\t\t\t\t<ListItem button key={index}>\n\t\t\t\t\t\t\t<ListItemText\n\t\t\t\t\t\t\t\tprimary={text}\n\t\t\t\t\t\t\t\tonClick={() => this.handleListItem(text)}\n\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t</ListItem>\n\t\t\t\t\t)\n\t\t\t\t)}\n\t\t\t</List>\n\t\t</div>\n\t);\n\n\thandleClick = datum => {\n\t\tconsole.log(\"Clicked\", datum);\n\t};\n\n\trender() {\n\t\tconst {classes} = this.props;\n\t\tconsole.log(classes)\n\n\t\treturn (\n\t\t\t<>\n\t\t\t\t<div>\n\t\t\t\t\t<SwipeableDrawer className={classes.drawer}\n\t\t\t\t\t\topen={this.state.drawerToggle}\n\t\t\t\t\t\tonClose={this.handleToggle}\n\t\t\t\t\t\tonOpen={this.handleToggle}\n\t\t\t\t\t>\n\t\t\t\t\t\t{this.sideList(classes)}\n\t\t\t\t\t</SwipeableDrawer>\n\t\t\t\t</div>\n\n\t\t\t\t<div style={{ textAlign: \"center\" }}>\n\t\t\t\t\t<svg width={500} height={500}>\n\t\t\t\t\t\t<VictoryPie\n\t\t\t\t\t\t\tdata={this.handleChartData(this.state.type)}\n\t\t\t\t\t\t\tstandalone={false}\n\t\t\t\t\t\t\tcolorScale={[\"red\", \"navy\", \"gray\", \"gold\", \"green\"]}\n\t\t\t\t\t\t\tanimate={{\n\t\t\t\t\t\t\t\tduration: 2000\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</svg>\n\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Button color=\"secondary\" onClick={this.handleToggle}>\n\t\t\t\t\t\t\tChoose Display Modes\n\t\t\t\t\t\t</Button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</>\n\t\t);\n\t}\n}\nconst mapStateToProps = state => {\n\treturn {\n\t\texpenses: state.expense.expenses,\n\t\tincome: state.income.income\n\t};\n};\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tgetIncome: dispatch(getIncome()),\n\t\tgetExpense: dispatch(getExpense())\n\t};\n};\n\nexport default connect(\n\tmapStateToProps,\n\tmapDispatchToProps\n)(withStyles(styles)(ChartModes));\n"]},"metadata":{},"sourceType":"module"}